syntax=docker.io/docker/dockerfile:1

FROM node:18-alpine AS base

# Stage for installing dependencies
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /build

# Install dependencies based on your package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Build stage
FROM base AS builder
WORKDIR /build
COPY --from=deps /build/node_modules ./node_modules
COPY . .

# Set up telemetries (optional)
# ENV NEXT_TELEMETRY_DISABLED=1

# Run build command
RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Create user/group
FROM base AS runner
WORKDIR /build

ENV NODE_ENV=production
# Disable telemetry at runtime (optional)
# ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Export build artifacts
COPY --from=builder /build/.next/standalone ./
COPY --from=builder /build/.next/static ./.next/static

USER nextjs

# EXPOSE 3000
# ENV PORT=3000

CMD ["node", "server.js"]  # Important! Use server.js generated by Next.js
